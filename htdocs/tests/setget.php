<?php

/**
 * @property int $property
 * @property-read $property_read
 * @property-write $property_write
 */
class A
{

	/** @var  int */
	private $property;
	private $property_read;
	private $property_write;

	function __construct()
	{
		$this->property_read = 'xxx';
	}


	function __set($name, $value)
	{
		switch($name) {
			case 'property':
				$this->property = (int) $value;
				break;
			case 'property_write':
				$this->property_write = $value;
				break;
			default:
				throw new Exception('No such writable property: ' . $name);
		}
	}

	function __get($name)
	{
		switch($name) {
			case 'property':
				return $this->property;
				break;
			case 'property_read':
				return $this->property_read;
				break;
			default:
				$bt = debug_backtrace(false);
				print_r($bt);
				throw new Exception('No such readable property: ' . $name);
		}
	}
}

class B extends A
{
	use Singleton;
	private $asd;
	function __construct()
	{
		parent::__construct(); // TODO: Change the autogenerated stub
		$this->property = '123';
		echo $this->property;
		$this->asd = 'asd';
		$this->getInstance();
	}
}

trait Singleton
{
	function getInstance(){
		echo "trait";
	}
}

$a = new A();
$a->property = '22';
//$a->property_read = 22;
echo $a->property;
//echo $a->property_write;
$b = new B();
$b->property = '444';
echo $b->property;